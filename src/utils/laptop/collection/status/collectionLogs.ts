
import { CollectionStats } from "../../types";

/**
 * Log batch processing status
 * @param batchNumber Current batch number
 * @param totalBatches Total number of batches
 * @param batchBrands Brands in the current batch
 */
export function logBatchStatus(batchNumber: number, totalBatches: number, batchBrands: string[]) {
  const emoji = getProgressEmoji(batchNumber, totalBatches);
  console.log(`\n${emoji} Processing batch ${batchNumber}/${totalBatches} (${Math.round((batchNumber/totalBatches)*100)}% complete)`);
  console.log(`üè∑Ô∏è Brands in this batch: ${batchBrands.join(', ')}`);
  console.log(`‚è±Ô∏è Started at: ${new Date().toLocaleTimeString()}`);
  console.log(`üß† Expected completion: ~${Math.round(batchBrands.length * 2.5)} minutes`);
  console.log(`üíº Parallel processing: ${batchBrands.length} brands simultaneously`);
  console.log('-------------------------------------------');
}

/**
 * Log collection start information
 * @param totalBrands Total number of brands
 * @param isResuming Whether the collection is being resumed
 * @param fromGroup Starting group index
 * @param fromBrand Starting brand index
 */
export function logCollectionStart(totalBrands: number, isResuming: boolean, fromGroup: number = 0, fromBrand: number = 0) {
  console.log('\n===========================================');
  
  if (isResuming) {
    console.log(`üîÑ RESUMING LAPTOP COLLECTION from Group ${fromGroup + 1}, Brand ${fromBrand + 1}`);
    console.log(`üîç Picking up from where we left off`);
    const percentComplete = Math.round(((fromGroup * totalBrands + fromBrand) / totalBrands) * 100);
    console.log(`üìä Progress: ~${percentComplete}% already completed`);
  } else {
    console.log('üöÄ STARTING NEW LAPTOP COLLECTION');
    console.log('üßπ Fresh collection, starting from scratch');
  }
  
  console.log(`üìö Total brands to process: ${totalBrands}`);
  console.log(`‚è±Ô∏è Started at: ${new Date().toLocaleString()}`);
  console.log(`‚öôÔ∏è System info: ${navigator.userAgent}`);
  
  // Estimate completion time
  const estimatedMinutes = Math.round(totalBrands * 2.5);
  const hours = Math.floor(estimatedMinutes / 60);
  const minutes = estimatedMinutes % 60;
  console.log(`‚è≥ Estimated completion time: ${hours > 0 ? `${hours} hour${hours !== 1 ? 's' : ''} ` : ''}${minutes} minute${minutes !== 1 ? 's' : ''}`);
  
  console.log('===========================================\n');
}

/**
 * Log collection completion
 * @param startTime Start time of the collection
 * @param stats Final collection statistics
 */
export function logCollectionCompletion(startTime: Date, stats: CollectionStats) {
  const duration = Math.round((new Date().getTime() - startTime.getTime()) / 1000);
  const minutes = Math.floor(duration / 60);
  const seconds = duration % 60;
  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;
  
  console.log('\n===========================================');
  console.log('üéâ LAPTOP COLLECTION COMPLETED!');
  console.log(`‚è±Ô∏è Total duration: ${hours > 0 ? `${hours}h ` : ''}${remainingMinutes}m ${seconds}s`);
  
  // Calculate processing rate
  const totalProcessed = stats.processed || 0;
  const processingRate = totalProcessed > 0 ? Math.round(totalProcessed / (duration / 60)) : 0;
  
  console.log(`‚ö° Processing rate: ~${processingRate} products per minute`);
  console.log(`üìä Final stats:`);
  console.log(`  ‚úÖ Processed: ${stats.processed}`);
  console.log(`  üÜï Added: ${stats.added}`);
  console.log(`  üîÑ Updated: ${stats.updated}`);
  console.log(`  ‚ùå Failed: ${stats.failed}`);
  console.log(`  ‚è≠Ô∏è Skipped: ${stats.skipped || 0}`);
  
  // Calculate success rate
  const successRate = Math.round(((stats.added + stats.updated) / (stats.processed || 1)) * 100);
  const successEmoji = successRate >= 90 ? 'üåü' : successRate >= 75 ? '‚ú®' : successRate >= 50 ? 'üëç' : '‚ö†Ô∏è';
  
  console.log(`  ${successEmoji} Success rate: ${successRate}%`);
  console.log(`‚è±Ô∏è Completed at: ${new Date().toLocaleString()}`);
  console.log('===========================================\n');
}

/**
 * Get appropriate emoji based on progress
 * @param current Current step
 * @param total Total steps
 * @returns Emoji representing progress
 */
function getProgressEmoji(current: number, total: number): string {
  const progress = current / total;
  
  if (progress < 0.25) return 'üü¢';
  if (progress < 0.50) return 'üü°';
  if (progress < 0.75) return 'üü†';
  if (progress < 1) return 'üî¥';
  return '‚úÖ';
}
