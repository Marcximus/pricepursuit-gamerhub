
/**
 * Parses and processes the raw content generated by the AI
 */
export function parseGeneratedContent(content: string, category: string) {
  try {
    // Attempt to parse if it's already valid JSON
    try {
      const parsedJson = JSON.parse(content);
      
      // For Top 10 posts, replace the video placeholder with the Humix script
      if (category === 'Top10' && parsedJson.content) {
        parsedJson.content = addHumixScriptToContent(parsedJson.content);
      }
      
      // For How-To posts, process the content to add image placeholders
      if (category === 'How-To' && parsedJson.content) {
        parsedJson.content = processHowToContent(parsedJson.content);
      }
      
      return {
        ...parsedJson,
        category,
      };
    } catch (e) {
      // If not valid JSON, try to extract JSON from the text
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const jsonStr = jsonMatch[0];
        const parsedJson = JSON.parse(jsonStr);
        
        // For Top 10 posts, replace the video placeholder with the Humix script
        if (category === 'Top10' && parsedJson.content) {
          parsedJson.content = addHumixScriptToContent(parsedJson.content);
        }
        
        // For How-To posts, process the content to add image placeholders
        if (category === 'How-To' && parsedJson.content) {
          parsedJson.content = processHowToContent(parsedJson.content);
        }
        
        return {
          ...parsedJson,
          category,
        };
      }

      // If we still can't parse it, try a more manual approach
      const title = content.match(/title["']?\s*:\s*["']([^"']+)["']/i)?.[1] || "";
      const excerpt = content.match(/excerpt["']?\s*:\s*["']([^"']+)["']/i)?.[1] || "";
      
      // Extract content - this is tricky as it might contain newlines and quotes
      let extractedContent = "";
      const contentMatch = content.match(/content["']?\s*:\s*["']([^]+?)["'],/i);
      if (contentMatch && contentMatch[1]) {
        extractedContent = contentMatch[1].replace(/\\n/g, '\n').replace(/\\"/g, '"');
      }
      
      // For Top 10 posts, replace the video placeholder with the Humix script
      if (category === 'Top10' && extractedContent) {
        extractedContent = addHumixScriptToContent(extractedContent);
      }
      
      // For How-To posts, process the content to add image placeholders
      if (category === 'How-To' && extractedContent) {
        extractedContent = processHowToContent(extractedContent);
      }
      
      // Extract tags
      const tagsMatch = content.match(/tags["']?\s*:\s*\[(.*?)\]/i);
      const tags = tagsMatch ? 
        tagsMatch[1].split(',').map(tag => 
          tag.trim().replace(/^["']|["']$/g, '')
        ) : [];
      
      return {
        title,
        content: extractedContent || content,  // Fallback to the entire content if extraction failed
        excerpt,
        category,
        tags,
      };
    }
  } catch (error) {
    console.error('Error parsing generated content:', error);
    // Return the raw content if parsing fails
    return {
      title: "Generated Blog Post",
      content: content,
      excerpt: "Generated blog content",
      category,
      tags: [],
    };
  }
}

/**
 * Adds the Humix video script to content by replacing placeholders
 */
function addHumixScriptToContent(content: string): string {
  return content.replace(
    /<div class="video-placeholder"><\/div>/g,
    `<script data-ezscrex="false" data-cfasync="false">(window.humixPlayers = window.humixPlayers || []).push({target: document.currentScript});</script><script async data-ezscrex="false" data-cfasync="false" src="https://www.humix.com/video.js"></script>`
  );
}

/**
 * Process How-To content to ensure image placeholders are properly formatted
 */
function processHowToContent(content: string): string {
  // Add the Humix video script
  let processedContent = addHumixScriptToContent(content);
  
  // Ensure image placeholders have proper formatting
  const imageRegex = /<div class="image-placeholder" id="image-(\d+)"><p>Image \d+: ([^<]+)<\/p><\/div>/g;
  
  // Replace with proper image placeholder format
  processedContent = processedContent.replace(imageRegex, (match, number, description) => {
    return `<div class="image-placeholder" id="image-${number}" data-description="${description.trim()}">
      <div class="placeholder-content">
        <div class="upload-icon">ðŸ“·</div>
        <p>Image ${number}: ${description.trim()}</p>
        <p class="upload-hint">Click to upload an image</p>
      </div>
    </div>`;
  });
  
  return processedContent;
}
